Agenda

week 1-7 compiler week
	- If box and Switch support.
	- restore clipboard
	- New
	- Static box?
	- field access
	- write one article
week 8-14 
	- array creation/access
	- compilador amb parametres out apply(in in in)
	- @Apply marks method to invoke
	- analyzerConnections check correctness (missing ports eg)
	- visual only boxes
	- Automatic icon grows/shrinks depending on number of ports
week 15-21 GUI week
	- change port names
	- nested guis as new window
	- make sure refactorings and quickfixes are not picked from java jdt. (eg. Declared package)
	- Swing thread synchronization / refresh rate	
	- al connectar o desconnectar cables de vegades fa coses rares
	- quan es vol moure un fil, costa de que no s'activi el de fer extensions
	- when a visual component moves, resize the canvas size
	- notes/ visual only on diagram
week 22-28 library week
	- Graphing widget properties. Color/etc( see labview)
	- drivers
		- template
		- serial
		- tcp/ip 
	- basic math
	- sound output clicks?
week 29-4 doc week -> ampliar detalls
	- tutorials/docs/etc
	- examples/screencast
	- build scripts
week 5-11 bug hunting
	- test cases bug fixing
	- box unbox
	- generics
	- protected/private
	- compilation with errors in java ProblemBinding, etc
week 12-18 launch week
	- beta nag screen/ watermark
	- buy hosting
	- buy template
	- publish beta
	- buy adwords	

article ideas
	- Use cases. Fake forum posts.
	- Strategy. How to start. Open source library / pay tools.
	- Why Zaluum: Write/Draw what makes sense. Future directions. Why JVM.
	- Robot
	- Scala

bugs
	-s'ha d'engegar RCP en unity amb UBUNTU_MENUPROXY=0
	-sembla que xulrunner dona algun problema d'alt consum de cpu. xulrunner 2 no?
	
LATER
	- Timed loop?
	-suport per a multiples directors (multi-threading)
	-backend soot? backend JDT? suport per multi backend? (generacio codi c/hadoop?)
	-Feedback connections
	*herencia de .zaluums? 
	-write javadoc on zaluum files
	-com gestionar excepcions?
	-Extensible in/out with unfolded array inputs
	-GUI deep preview -> metode per inicialitzar gui sense la box?
	-declare constructor on zaluum, use as parameter in instances
	-re layout on box movement
	-show/hide grid
	-snap correctly
	-java search full support/refactor support
	-refactor some boxes into a new subsystem
	-mirar la visibilitat del port (protected/public) al compilar. Visualitzar el port depenent de si es accessible o no.
	-Better port colors. @Color?
	-External port position selection
	-revisar format protobuf (simplificar, fer servir text pla?)	
	-align tool
	-double click or ctrl click goes to definition
	-refactor
		- org.eclipse.jdt.internal.corext.refactoring.RefactoringAvailabilityTester
		- org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgUtils.getJavaElements .getResources
		- org.eclipse.jdt.internal.core.util.Util. isJavaLikeFileName
		- org.eclipse.jdt.internal.core.CopyResourceElementsOperation
		- org.eclipse.jdt.internal.core.CreatePackageDeclaration
		- ICompilationUnit create...
	-fondo workbench com talend amb fletxes que indiquen com començar
	-better icon set
	-Zoom
	-groovy compatible/scala compatible
	-Mark errors on presentation compiler? ex. no constructor found.
	-fer possible que es pugui passar al constructor una o més boxes per emplenar el diagrama. S'ha de tenir eina per posar una interficie sense new al diagrama.
	-diferent directors
	-editor icones
	-multi-threading
	-Search in palette

MUCH LATER
	-code generation
	-map reduce/other outputs.
	
DONE!
	- GUI per seleccionar el tipus dels port
	- ensure method binding is resolved and hierarchy connected.
	- some error resistant on invoke
	- better gui for method selection
	- this as out
	- ignore static
	- connectar subclasses. Dog->Animal (isAssignable?)
	- box unbox support
	- invokeInterface/InvokeSpecial
	- parameter order and names (p1,p2,p2 or names)
	- ignore generics
	- check method visibility
	- helper to select method signature
	- look available methods
	- go to superclass / superinterface
	- abstract classes 
	- filter bridges, synthetics etc?
	- downcast automàtic
	* suport per a boxes especialitzades (operacions matematiques) -> expressions
		-Generic +-*/ and others. Box templates. (Box.class with Object inputs or special marker interface type. Box$int.class specialized)
	-expressions
	-testing harness
	-peta el paquet default
	-comprovar si hi ha metode apply
	-Palette as tree with eclipse filters
	-Wrap text on automatic icons
	-mida lletra icona en altres pcs
	-Ensure icon disposal
	- org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory current classloading scheme doesn't allow to load the JDT compiler from <classpath>. It must be on ant -lib classpath.
	-proguard ant
	-automate build proguard ant
	-standalone compiler
	-Cache palette/ background search
	-Javadoc on palette 
	-Background of an empty file not plain white ("start here" text?)
	-bad tooltip colors with dark theme