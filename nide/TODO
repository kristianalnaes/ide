Agenda
	Needed
	- align tool 
	- Better tools to build objects (bundle/unbundle) (setters/getters)
	- human readable signature label provider
	- check arities > 10
	- check apply double a() with @out a
	- mark errors on tooltip / valdefs
	- If a tool throws an exception exit the tool and go to select
	- remove one end connections	
	- When pasting with ctrl-v it pastes to the main block. Use the same mechanism as creation. 
	- for - array construction
	- switch
	- widget library

	- make sure refactorings and quickfixes are not picked from java jdt. (eg. Declared package)

	- drivers
		- template
		- serial
		- tcp/ip 
	- test cases bug fixing
		- cast
		- box unbox
		- generics
		- protected/private
	- basic math
	- Make it future-proof. Think how to add features and mantain versions.
	- Change type of a box to While or if (doesn't have template) when if has 2 blocks.
	
	Improvements
	- Better wire movements.
	- How to better detect a drag operation? The button down event, comes with some delay.
	- Right button -> add to palette -> palette.xml
	- Libraries to do data log easily
	- VISA Virtual Instruments wrapper library. 
	- Clone with Ctrl 
	- Initial size of elements compatible with grid. Initial size in paletteEntry? 
	- Mechanism to chain commands that need a visual layout
		- on move, resize
		- ensure min size after command.
	
	- Add user notes to Block diagram.
	- z order for GUI widgets
	- clean up wire
	- properties get updated two times. Fix it. 
	- Create port connecting a cable.
	- Add "View as icon", to have a smaller icon. 
	- Paint shadow if element is not inside the box is falls. 
	- Better labels: select font, etc. Javabeans.
	- Decoration elements
	
	Think
	- How to do LV Clusters? Hashmap? Internal class? Structural typing in Java is hard.
	- lv local variable = field access? 	
	- lv global variable = static field?
	- tutorials/docs/etc
	- examples/screencast
	- How to deal with arrays?
		- For exemple, to implement the sum of two arrays:
			- If it's implemented with methods, one mètod for each type combination. No.
			- The result has to be the length of the shorter array.
				- What operations? all?
				- Implement some kind of functional progamming: map,flatmap?
			- Extend to java collections?
			- box "for"
		- grow array? Add element to array? Or collection?
	- Memory model:
		- clone objects on wire branch? 
		- always references. each box a new object (Like scala immutability)
			- Possible with modern GC. 
	
Ideas
	- Scala.react reactive programming for GUI.
	- Connection points are a zone like LV. Easier to draw a straight wire.
	 
BUGS
	- Wire algorithm sometimes fail. Revamp with endpoint play?
	- BUG null at org.zaluum.nide.zge.RichFigure.translateFromViewport(baseFigures.scala:63). Why?
 	- Test new array dimensions
	- RCP on Ubuntu Unity needs UBUNTU_MENUPROXY=0
	- Xulrunner has some problems with high cpu usage. Solved with xulrunner 2?
	
	
LATER
	- Better placing of widget when dropped in the diagram. (Look for empty space?)
	- Hide/categorize advanced JavaBeans properties.
	- Move from literal parsing to expression parsing (field access, method invoke)... (which language? Java subset?)
	- miglayout support
	- Better support for Nested GUIs
	- thread inner classes in jmodel
	- analyze multi thread with cost estimation
	- ensure method/field order in generated code
	- Dependecy tracking for incremental compilation when a box changes port names but not the method signature. Solved with @ParamNames annotation?
	- Optimize locals usage in code generation 
	- how to get all methods with visibleFrom ZaluumCompilationUnitScope?
	- Timed loop?
	- Getter/setter boxes with all fields at once instead of selecting one
	- suport for Directors. Other diagram semantics.
	- Feedback connections. Allow loops.
	* Write javadoc on zaluum files
	* How to deal with exceptions? Specially when multithreading is on.
	- Extensible in/out with unfolded array inputs. Drag box border to see more inputs.
	- GUI deep preview. How to do it?
	- Declare constructor on zaluum file, use as parameter in instances
	- Show/hide grid
	- Snap correctly
	- Java search full support/refactor support
	- Command to Refactor some boxes into a new subsystem
	* Better port colors. @Color?
	- External port position selection. Not only alphabetic.
	- Explain better protobuf format (simplify, plain text format?)	
	- double click or ctrl click goes to definition
	* Inheritance in .zaluums? 
	- refactor
		- org.eclipse.jdt.internal.corext.refactoring.RefactoringAvailabilityTester
		- org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgUtils.getJavaElements .getResources
		- org.eclipse.jdt.internal.core.util.Util. isJavaLikeFileName
		- org.eclipse.jdt.internal.core.CopyResourceElementsOperation
		- org.eclipse.jdt.internal.core.CreatePackageDeclaration
		- ICompilationUnit create...
	- Better icon set
	- Zoom
	- Groovy compatible/scala compatible
	- Mark errors on presentation compiler? ex. no constructor found.
	* Functional programming, passing a box as a parameter in the constructor.
	- Icon editor.
	- Search in palette

MUCH LATER
	- map reduce/other outputs.
	
DONE!
	- No seleccionar mètodes amb signatura completa només nom i numero de parametres. Buscar matching.
	- auto type als ports interns
	- moure boxes entre contenidors
	- despres de crear una box, quan s'edita l'etiqueta, fer que es pugui connectar els ports cancelant l'edició
	- zaluum file with version number
	- configurador blocs complexos. Plot per exemple.
	- eliminar boxtypesymbol. Qualsevol JavaType com a box
	- emetre labels amb linies de codi per excepcions
	- al crear modificar directament la label. Crear nom del camp a partir de label.
	- al copiar, moure les coordenades lleugerament (tant gui com pos)
	- colocar widget a les mateixes coordenades que al diagrama de blocks al crear(buscar forat?)
	- grid més gran a GUI, desactivar-la al block diagram
	- decoracions: gui only box 
	- Special property loader (color, list contents...) -> menu -> code gen
	- buidar metodes boxtypesymbol, fer servir binding
	- Enlloc de _widget heredar directament de Jpanel
	- Javabean properties
	- each box have an unique name
	- quan es vol moure un fil, costa de que no s'activi el de fer extensions. Temporitzador de mouse quiet o dins una zona?
	- Swing thread synchronization / refresh rate	
	- fix show label on gui
	- multi thread code generation
	- fix find methods and constructors in scope by visibility
	- better port names (this,thisOut)
	- remove expr .javas and organize better packages for exprs IF javadoc support ok
	- implement cast to object
	- when a visual component moves, resize the canvas size
	- respawn test framework
	- improve error messages
	- mark errors on boxes/connections/ports
	- unified interface to select port type, array type/dim, class/method/field
	- change port names
	- check return port name collision with java keywords object methods
	- Automatic icon grows/shrinks depending on number of ports
	- connection in->out
	- helperNames for java 
	- fix widget
	- @Apply marks method to invoke
	* compilador amb parametres out apply(in in in)
	- consider array style for get/put
	- array creation
	- array access
	- New
	- Static method and field access
	- field access
	- restore clipboard
	- gui support to change block vi
	- If box and Switch support.
	- GUI per seleccionar el tipus dels port
	- ensure method binding is resolved and hierarchy connected.
	- some error resistant on invoke
	- better gui for method selection
	- this as out
	- ignore static
	- connectar subclasses. Dog->Animal (isAssignable?)
	- box unbox support
	- invokeInterface/InvokeSpecial
	- parameter order and names (p1,p2,p2 or names)
	- ignore generics
	- check method visibility
	- helper to select method signature
	- look available methods
	- go to superclass / superinterface
	- abstract classes 
	- filter bridges, synthetics etc?
	- downcast automàtic
	* suport per a boxes especialitzades (operacions matematiques) -> expressions
		-Generic +-*/ and others. Box templates. (Box.class with Object inputs or special marker interface type. Box$int.class specialized)
	-expressions
	-testing harness
	-peta el paquet default
	-comprovar si hi ha metode apply
	-Palette as tree with eclipse filters
	-Wrap text on automatic icons
	-mida lletra icona en altres pcs
	-Ensure icon disposal
	- org.apache.tools.ant.taskdefs.compilers.CompilerAdapterFactory current classloading scheme doesn't allow to load the JDT compiler from <classpath>. It must be on ant -lib classpath.
	-proguard ant
	-automate build proguard ant
	-standalone compiler
	-Cache palette/ background search
	-Javadoc on palette 
	-Background of an empty file not plain white ("start here" text?)
	-bad tooltip colors with dark theme